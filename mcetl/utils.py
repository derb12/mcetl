# -*- coding: utf-8 -*-
"""Provides utility functions.

Useful functions are put here in order to prevent circular importing
within the other files.

@author: Donald Erb
Created on Wed Jul 15 14:26:59 2020

"""


import pandas as pd
import PySimpleGUI as sg


#the button color for buttons that proceed to the next window.
PROCEED_COLOR = ('white', '#00A949')
                 

class WindowCloseError(Exception):
    """Custom exception to allow exiting a GUI window to stop the program"""


def safely_close_window(window):
    """
    Closes a PySimpleGUI window and removes the window and its layout.

    Used when exiting a window early by manually closing the window. Ensures
    that the window is properly garbage collected, and then raises a
    WindowCloseError exception, which can be used to determine that the window
    was manually closed.

    Parameters
    ----------
    window : Window object from PySimpleGui
        The window that was closed.

    """

    window.close()
    del window

    raise WindowCloseError


def string_to_unicode(input_list):
    """
    Takes a list of strings and replaces the '\\(you)' in the strings with '\(you)', where (you) is u'.

    Necessary because the user input from PySimpleGui's InputText element
    will convert any '\' input by the user to '\\', which will not
    be converted to the desired unicode. If the string already has unicode
    characters, it will be left alone.

    Parameters
    ----------
    input_list : (list, tuple) or str
        A container of strings or a single string.

    Returns
    -------
    new_list : (list, tuple) or str
        A container of strings or a single string, depending on the input,
        with the unicode correctly converted.

    """

    if isinstance(input_list, str):
        input_list = [input_list]
        return_list = False
    else:
        return_list = True

    new_list = [[] for i in range(len(input_list))]

    for i, entry in enumerate(input_list):
        if '\\u' in entry:
            #replace "\\\\u" with "\\u" in case user used \\ instead of \
            new_list[i] = entry.replace('\\\\u', '\\u').encode('utf-8').decode('unicode_escape')
        else:
            new_list[i] = entry

    if return_list:
        return new_list
    else:
        return new_list[0]


def validate_inputs(window_values, integers=None, floats=None, strings=None,
                    user_inputs=None):
    """
    Validates entries from a PySimpleGUI window.

    Parameters
    ----------
    window_values : dict
        A dictionary of values from a PySimpleGUI window, generated by using
        window.read().
    integers : list, optional
        A list of lists (see Notes below), with each key corresponding
        to a key in the window_values dictionary, whose values should
        be integers.
    floats : list, optional
        A list of lists (see Notes below), with each key corresponding
        to a key in the window_values dictionary, whose values should
        be floats.
    strings : list, optional
        A list of lists (see Notes below), with each key corresponding
        to a key in the window_values dictionary, whose values should
        be non-empty strings.
    user_inputs : list, optional
        A list of lists (see Notes below), with each key corresponding
        to a key in the window_values dictionary, whose values should
        be a certain datatype; the values are first determined by
        separating each value using ',' (maybe later add the separator
        as an additional input).

    Returns
    -------
    bool
        True if all data in the window_values dictionary is correct.
        False if there is any error with the values in the window_values dictionary.

    Notes
    -----
    Inputs for integers, floats, and strings are [[key, display text],].
    For example: [['peak_width', 'peak width']].
    
    Inputs for user_inputs are [[key, display text, data type],].
    For example: [['peak_width', 'peak_width', float]].

    The display text will be the text that is shown to the user if the value
    of window_values[key] is not the correct data type.

    """

    if integers is not None:
        integers = integers if isinstance(integers, (list, tuple)) else [integers]
        for entry in integers:
            try:
                int(window_values[entry[0]])
            except:
                sg.Popup(f'Need to enter integer in "{entry[1]}".\n', title='Error')
                return False

    if floats is not None:
        floats = floats if isinstance(floats, (list, tuple)) else [floats]
        for entry in floats:
            if entry == 'inf':
                continue
            elif entry == '-inf':
                continue
            else:
                try:
                    float(window_values[entry[0]])
                except:
                    sg.Popup(f'Need to enter number in "{entry[1]}".\n', title='Error')
                    return False

    if strings is not None:
        strings = strings if isinstance(strings, (list, tuple)) else [strings]
        for entry in strings:
            try:
                if not window_values[entry[0]]:
                    raise ValueError
            except:
                sg.Popup(f'Need to enter information in "{entry[1]}".\n', title='Error')
                return False

    if user_inputs is not None:
        user_inputs = user_inputs if isinstance(user_inputs, (list, tuple)) else [user_inputs]
        for entry in user_inputs:
            try:
                inputs = [ent for ent in window_values[entry[0]].replace(' ', '').split(',') if ent]
                [entry[2](inpt) for inpt in inputs]

            except:
                sg.Popup(f'Need to correct entry for "{entry[1]}".\n', title='Error')
                return False

    return True


def show_dataframes(dataframes, title='Raw Data'):
    """
    Used to show data to help select the right columns or datasets from the data.

    Parameters
    ----------
    dataframes : list or pd.DataFrame
        Either (1) a pandas DataFrame, (2) a list of DataFrames, or (3) a list
        of lists of DataFrames. The layout of the window will depend on the
        input type.
    title : str, optional
        The title for the popup window.

    Returns
    -------
    window : sg.Window or None
        If no exceptions occur, a PySimpleGUI window will be returned; otherwise,
        None will be returned.

    """

    try:

        if isinstance(dataframes, pd.DataFrame):
            single_file = True
            dataframes = [[dataframes]]
        else:
            single_file = False

            if isinstance(dataframes[0], pd.DataFrame):
                single_dataset = True
                dataframes = [dataframes]
            else:
                single_dataset = False

        tabs = [[] for df_collection in dataframes]
        for i, df_collection in enumerate(dataframes):
            for j, dataframe in enumerate(df_collection):

                data = dataframe.values.tolist()
                if any(not isinstance(col, str) for col in dataframe.columns):
                    header_list = [f'Column {num}' for num in range(len(data[0]))]
                else:
                    header_list = dataframe.columns

                tabs[i] += [
                    sg.Table(values=data, headings=header_list, key=f'table_{i}{j}',
                             auto_size_columns=True, vertical_scroll_only=False,
                             num_rows=min(25, len(data)))
                ]

        if single_file:
            layout = [tabs[0]]
        else:
            datasets = []
            for i, tab_group in enumerate(tabs):
                datasets += [
                    [sg.Tab(f'Sample {j + 1}', [[table]],
                            key=f'set_{i}{j}') for j, table in enumerate(tab_group)]
                ]

            if single_dataset:
                layout = [
                    [sg.TabGroup([datasets[0]],
                                 tab_background_color=sg.theme_background_color())]
                ]

            else:
                tab_groups = []
                for i, tab_group in enumerate(datasets):
                    tab_groups += [
                        [sg.Tab(f'Dataset {i + 1}',
                                [[sg.TabGroup([tab_group],
                                              tab_background_color=sg.theme_background_color())]])]
                    ]
                layout = [[sg.TabGroup(tab_groups,
                                       tab_background_color=sg.theme_background_color())]]

        window = sg.Window(title, layout, resizable=True)

    except Exception as e:
        sg.Popup('Error reading file:\n    ' + repr(e) + '\n', title='Error')
        window = None

    finally:
        return window
