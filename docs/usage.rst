=====
Usage
=====

To use mcetl in a project:

.. code-block:: python

    import mcetl


Peak Fitting
~~~~~~~~~~~~

To use the peak fitting module in mcetl, simply do:

.. code-block:: python

    mcetl.launch_peak_fitting_gui()


A window will then appear to select the data file(s) to be fit and the Excel file for saving the results. No other setup is required for doing peak fitting.

After doing peak fitting, the peak fitting results and plots will be saved to Excel.


Plotting
~~~~~~~~

To use the plotting module in mcetl, simply do:

.. code-block:: python

    mcetl.launch_plotting_gui()


Similar to peak fitting, a window will then appear to select the data file(s) to be plotted, and no other setup is required for doing plotting.


When plotting, the image of the plots can be saved to all formats supported by matplotlib,
including tiff, jpg, png, svg, and pdf.


In addition, the layout of the plots can be saved to apply to other figures later, and the data for the plots can be saved so that the entire plot can be recreated.


To reopen a figure saved through mcetl, do:

.. code-block:: python

    mcetl.load_previous_figure()


Main GUI
~~~~~~~~

The main GUI for mcetl contains options for processing data, peak fitting, plotting, writing data to Excel, and moving files.

Before using the main GUI, DataSource objects must be created. Each DataSource contains the information for reading files for that DataSource (such as what separator to use, which rows and columns to use, labels for the columns, etc.), the calculations that will be performed on the data, and the options for writing the data to Excel (formatting, placement in the worksheet, etc.).

For more information on creating a DataSource object, refer to the `example program`_ that shows how to use the main gui.


.. _example program: https://github.com/derb12/mcetl/tree/master/examples


Generating Example Data
~~~~~~~~~~~~~~~~~~~~~~~

Files for example data from characterization techniques can be created using:

.. code-block:: python

    from mcetl import raw_data
    raw_data.generate_raw_data()


Data produced by the generate_raw_data function covers the following characterization techniques:

* X-ray diffraction (XRD)
* Fourier-transform infrared spectroscopy (FTIR)
* Raman spectroscopy
* Thermogravimetric analysis (TGA)
* Differential scanning calorimetry (DSC)
* Rheometry
* Uniaxial tensile tests
* Pore size measurements


Example Programs
~~~~~~~~~~~~~~~~

`Example programs`_  are available to show basic usage of mcetl. The examples include:

* Generating raw data
* Using the main GUI
* Using the peak fitting GUI
* Using the plotting GUI
* Reopening a figure saved with the plotting GUI


The example program for using the main GUI contains all necessary inputs for processing the example raw data generated by the generate_raw_data function as described above and is an excellent resource for creating new DataSource objects.


.. _Example programs: https://github.com/derb12/mcetl/tree/master/examples


Changing GUI Colors
~~~~~~~~~~~~~~~~~~~

All user interfaces are created using PySimpleGUI, which allows easily changing the theme of the GUIs.
For example, the following code will change the GUI theme to use PySimpleGUI's 'darkblue10' theme:

.. code-block:: python

    import PySimpleGUI as sg
    sg.theme('darkblue10')


Additionally, mcetl uses a unique coloring for the button that advances to the next window.
To change this button's colors (for example to use white text on a green background), do:

.. code-block:: python

    from mcetl import utils
    utils.PROCEED_COLOR = ('white', 'green')


Valid inputs for PROCEED_COLOR are color strings supported by PySimpleGUI, such as 'green',
or hex colors such as '#F9B381'.
